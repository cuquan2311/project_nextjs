import { NextRequest, NextResponse } from "next/server";
import * as jose from "jose";

//! ===========C·∫§U H√åNH B·∫¢O M·∫¨T=============
const SECRET_KEY = new TextEncoder().encode(
  process.env.JWT_SECRET_KEY ?? "ACCESS_SECRET"
);

//! ===========H√ÄM H·ªñ TR·ª¢ KI·ªÇM TRA JWT=========
async function verifyToken(token: string) {
  try {
    const { payload } = await jose.jwtVerify(token, SECRET_KEY);
    return payload;
  } catch (error) {
    return null;
  }
}

//! ===========MIDDLEWARE CH√çNH=============

export async function middleware(req: NextRequest) {
  const { pathname, origin } = req.nextUrl;
  const res = NextResponse.next();

  //! === LOG HEADER ===
  console.log(`\n==============================`);
  console.log(`üö¶ [MIDDLEWARE] ƒêang ch·∫°y cho: ${pathname}`);
  console.log(`==============================`);

  //! 1. X·ª¨ L√ù COOKIE NG√îN NG·ªÆ (LANG)
  const lang = req.cookies.get("lang")?.value;
  if (!lang) {
    res.cookies.set("lang", "en", {
      path: "/",
      maxAge: 60 * 60 * 24 * 100,
    });
    console.log("üåê [LANG] Thi·∫øt l·∫≠p m·∫∑c ƒë·ªãnh: 'en'");
  }

  //! ============2. B·∫¢O V·ªÜ ROUTE ADMIN=================
  if (pathname.startsWith("/admin")) {
    console.log("üß± [PROTECTED] Khu v·ª±c admin ‚Äî ki·ªÉm tra quy·ªÅn truy c·∫≠p...");

    const token = req.cookies.get("accessToken")?.value;

    //! ========2.1 Kh√¥ng c√≥ token => chuy·ªÉn h∆∞·ªõng login=======
    if (!token) {
      console.log("‚ùå [AUTH] Kh√¥ng t√¨m th·∫•y token ‚Äî c·∫ßn ƒëƒÉng nh·∫≠p l·∫°i");
      const redirectUrl = new URL(`/auth/login?next=${pathname}`, origin);
      console.log(`‚û°Ô∏è  [REDIRECT] Chuy·ªÉn h∆∞·ªõng ƒë·∫øn: ${redirectUrl}`);
      return NextResponse.redirect(redirectUrl);
    }

    //! ===== 2.2 X√°c th·ª±c token =====
    const payload = await verifyToken(token);
    if (!payload) {
      console.log("‚ö†Ô∏è  [AUTH] Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n");
      const redirectUrl = new URL(`/auth/login?next=${pathname}`, origin);
      return NextResponse.redirect(redirectUrl);
    }

    //! ==== 2.3 Ki·ªÉm tra role =====
    const role = payload.role;
    console.log(`üë§ [USER] Role hi·ªán t·∫°i: ${role}`);

    if (role !== "admin" && role !== "superAdmin") {
      console.log("üö´ [PERMISSION] Ng∆∞·ªùi d√πng kh√¥ng c√≥ quy·ªÅn truy c·∫≠p admin");
      return NextResponse.redirect(new URL("/status/403", origin));
    }

    console.log("‚úÖ [ACCESS GRANTED] Admin h·ª£p l·ªá, cho ph√©p ti·∫øp t·ª•c.");
  }

  //! ============3. C√ÅC ROUTE KH√ÅC=================
  else if (pathname.startsWith("/auth")) {
    console.log("üîì [PUBLIC] Trang login / register ‚Äî b·ªè qua x√°c th·ª±c.");
  } else {
    console.log("ü™∂ [GENERAL] Route c√¥ng khai ‚Äî cho ph√©p truy c·∫≠p.");
  }

  //! ========= K·∫æT TH√öC ========
  console.log(" [MIDDLEWARE DONE] Cho ph√©p ti·∫øp t·ª•c.\n");
  return res;
}

//! ==========C·∫§U H√åNH MIDDLEWARE MATCHER===============
export const config = {
  matcher: [
    "/",
    "/auth/:path*",
    "/admin/:path*",
    "/profile/:path*",
    "/api/:path*", // n·∫øu mu·ªën b·∫£o v·ªá API route
  ],
};
